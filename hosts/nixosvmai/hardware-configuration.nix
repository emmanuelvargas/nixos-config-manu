# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/profiles/qemu-guest.nix")
    ];

  # Use the EFI boot loader.
  boot.loader.efi.canTouchEfiVariables = true;
  # depending on how you configured your disk mounts, change this to /boot or /boot/efi.
  boot.loader.efi.efiSysMountPoint = "/boot";
  boot.loader.systemd-boot.enable = true;

  boot.kernelPackages = pkgs.linuxPackages_latest;

  boot.initrd.availableKernelModules = [ "ahci" "xhci_pci" "virtio_pci" "sr_mod" "virtio_blk" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];
  # clear /tmp on boot to get a stateless /tmp directory.
  boot.tmp.cleanOnBoot = true;

  # Enable binfmt emulation of aarch64-linux, this is required for cross compilation.
  boot.binfmt.emulatedSystems = ["aarch64-linux" "riscv64-linux"];
  # supported file systems, so we can mount any removable disks with these filesystems
  boot.supportedFilesystems = [
    "ext4"
    "btrfs"
    "xfs"
    "ntfs"
    "fat"
    "vfat"
    "exfat"
  ];


  fileSystems."/btr_pool" = {
    device = "/dev/disk/by-uuid/6124c136-602f-45fe-9e5e-9bf16b9d7574";
    fsType = "btrfs";
    # btrfs's top-level subvolume, internally has an id 5
    # we can access all other subvolumes from this subvolume.
    options = ["subvolid=5"];
  };

  # equal to `mount -t tmpfs tmpfs /`
  fileSystems."/" = {
    device = "tmpfs";
    fsType = "tmpfs";
    # set mode to 755, otherwise systemd will set it to 777, which cause problems.
    # relatime: Update inode access times relative to modify or change time.
    options = ["relatime" "mode=755"];
  };

  fileSystems."/nix" =
    { device = "/dev/disk/by-uuid/6124c136-602f-45fe-9e5e-9bf16b9d7574";
      fsType = "btrfs";
      options = [ "subvol=@nix" ];
    };

  fileSystems."/gnu" =
    { device = "/dev/disk/by-uuid/6124c136-602f-45fe-9e5e-9bf16b9d7574";
      fsType = "btrfs";
      options = [ "subvol=@guix" ];
    };

  fileSystems."/tmp" =
    { device = "/dev/disk/by-uuid/6124c136-602f-45fe-9e5e-9bf16b9d7574";
      fsType = "btrfs";
      options = [ "subvol=@tmp" ];
    };

  fileSystems."/swap" =
    { device = "/dev/disk/by-uuid/6124c136-602f-45fe-9e5e-9bf16b9d7574";
      fsType = "btrfs";
      options = [ "subvol=@swap" ];
    };

  fileSystems."/persistent" =
    { device = "/dev/disk/by-uuid/6124c136-602f-45fe-9e5e-9bf16b9d7574";
      fsType = "btrfs";
      options = [ "subvol=@persistent" ];
      neededForBoot = true;
    };

  fileSystems."/snapshots" =
    { device = "/dev/disk/by-uuid/6124c136-602f-45fe-9e5e-9bf16b9d7574";
      fsType = "btrfs";
      options = [ "subvol=@snapshots" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/D682-1AD0";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
